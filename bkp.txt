
import * as C from './App.styles';
//import { CreateTodo } from './components/Create';
import './App.css';
import React, { useEffect, useState } from 'react';
import { withAuthenticator, AmplifySignOut } from '@aws-amplify/ui-react';
import { API } from 'aws-amplify';
import { listTodos } from './graphql/queries';
import {createTodo as createTodoMutation, deleteTodo as deleteTodoMutation} from './graphql/mutations';
/*
import { makeStyles } from '@material-ui/core/styles';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import Divider from '@material-ui/core/Divider';
import ListItemText from '@material-ui/core/ListItemText';
import ListItemAvatar from '@material-ui/core/ListItemAvatar';
import Avatar from '@material-ui/core/Avatar';
import Typography from '@material-ui/core/Typography';
import Grid from '@material-ui/core/Grid';
import IconButton from '@material-ui/core/IconButton';
import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';
import DeleteIcon from '@material-ui/icons/Delete';
import AddIcon from "@material-ui/icons/Add";
import TextField from '@material-ui/core/TextField';
import Box from '@material-ui/core/Box';
import { Fab } from "@material-ui/core";
import PhotoCamera from '@material-ui/icons/PhotoCamera';

const useStyles = makeStyles((theme) => ({
  root: {
    width: '100%',
    maxWidth: '36ch',
    backgroundColor: theme.palette.background.paper,
    margin: theme.spacing(3),
  },
  itens: {
    width: '90%',
    margin: '10px',
    padding: '10px',
  },
  inline: {
    display: 'inline',
  },
  input: {
    display: 'none',
  },
  textField: {
    marginLeft: theme.spacing(1),
    marginRight: theme.spacing(1),
    width: '25ch',
    color: "#2882F8",
  },
  div: {
    color: "#FFF",
    backgroundColor: "#f29316",
    margin: '10px',
    marginBottom: '20px',
    padding: '15px',
  },
  campos: {
    margin: '10px',
    padding: '10px',
  },
  camera: {
    color: "#f29316",
  }
}));
*/

const initialFormState = { name: '', check: false}


function App() {

  const [todos, setTodos] = useState([]);
  const [formData, setFormData] = useState(initialFormState);


  useEffect(() => {
    fetchTodos();
  }, []);

  async function onChange(e) {
    if(!e.target.files[0]) return
    const file = e.target.files[0];
    setFormData({ ...formData})
  }


  async function fetchTodos() {
    const apiData = await API.graphql({ query: listTodos});
    setTodos(apiData.data.listTodos.items);
  }

  async function createTodo(){
    if (!formData.name || !formData.check) return;
    await API.graphql({ query: createTodoMutation, variables: {input: formData } });
    setTodos([ ...todos, formData ]);
    setFormData(initialFormState);
  }

  async function deleteTodo({id}) {
    const newTodosArray = todos.filter(todo => todo.id !== id);
    setTodos(newTodosArray);
    await API.graphql({ query: deleteTodoMutation, variables: {input: { id } }});
  }
  
  return (
     /*
    <C.Container>
      <C.Centro>
        <C.Header>
          TodoList
          <C.sub>Sua Lista de Tarefas online</C.sub>
        </C.Header>
        {//Criar novar Funções}
        {//<Create onEnter={addTask}/>
        

       </C.Centro>
    </C.Container>
      */

      
      <div className="App">
      <h1>TodoList</h1>
      <h3>Sua Lista de Tarefas online</h3>
      ➕
      <input className="teste"
        onChange={e => setFormData({ ...formData, 'name': e.target.value })}
        placeholder="Adicione uma nova tarefa..."
        value={formData.name}  
      />
      
      
      
      <div style={{marginBottom: 30}}>
        {
          todos.map(todo => (
            <div key={todo.id || todo.name}>
              <h2>{todo.name}</h2>
              <button onClick={() => deleteTodo(todo)}>Deletar Tarefa</button>
            </div>
          ))
        }
          </div>
      <AmplifySignOut />
    </div>
  );
}

export default withAuthenticator(App);